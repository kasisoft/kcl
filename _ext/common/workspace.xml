<?xml version="1.0"?>
<project name="workspace" basedir="." default="generate-configurations">

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Property definitions                                                                    -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

  <property environment="env"/>
  
  <dirname  property="dir.workspace"     file="../../dummy"            />
  <property name="dir.ext"               value="${dir.workspace}/_ext" />

  <property name="varprefix"    value="/instance/org.eclipse.jdt.core/org.eclipse.jdt.core.classpathVariable"/>

  <property file="${basedir}/workspace.properties"/>
  
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Path definitions                                                                        -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

  <path id="path.antextensions">
    <fileset dir="${dir.ext}">
      <include name="**/antcontrib/*.jar"/>
      <include name="**/antsvn/**/*.jar"/>
    </fileset>
  </path>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Task definitions                                                                        -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

  <taskdef classpathref="path.antextensions" resource="net/sf/antcontrib/antlib.xml"/>
  <taskdef classpathref="path.antextensions" resource="org/tigris/subversion/svnant/svnantlib.xml"/>
  
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Macro definitions                                                                       -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  
  <!-- ~~~ PRIVATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Allows to handle key-value pairs located within a properties file. A prefixing key is   -->
  <!-- used to select these pairs while the key itself is being removed.                       --> 
  <!--                                                                                         -->
  <!-- @param declaration        A property file containing the values to be loaded.           -->
  <!-- @param key                The key used for the prefixed key-value pairs.                -->
  <!--                                                                                         -->
  <!-- @param property-handler   An inlined element that will receive the key-value pair       -->
  <!--                           within the property 'property.name' and 'property.value'.     -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <macrodef name="process-pairs">
    <attribute name="declaration"/>
    <attribute name="key"/>
    <element name="property-handler" optional="false" description="Handler to process a key-value pair."/>
    <sequential>
      <!-- load all lines referencing the specified key. -->
      <loadfile srcfile="@{declaration}" property="process-pairs_content">
        <filterchain>
          <linecontainsregexp>
            <regexp pattern="^(@{key}\.)(.+)"/>
          </linecontainsregexp>
        </filterchain>
      </loadfile>
      <set-default property="process-pairs_content" value=""/>
      <for param="singleline" list="${process-pairs_content}" delimiter="&#10;" trim="yes">
        <sequential>
          <propertyregex property="property.name"  input="@{singleline}" regexp="^(@{key}\.)(.*)(=)(.+)" select="\2"/>
          <propertyregex property="property.value" input="@{singleline}" regexp="^(@{key}\.)(.*)(=)(.+)" select="\4"/>
          <property-handler/>
          <var unset="true" name="property.name"/>
          <var unset="true" name="property.value"/>
        </sequential>
      </for>
      <var unset="true" name="process-pairs_content"/>
    </sequential>
  </macrodef>

  <!-- ~~~ PRIVATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Allows to handle key-value established by 'var.txt' files and their directory           -->
  <!-- locations.                                                                              -->
  <!--                                                                                         -->
  <!-- @param dir          A property file containing the values to be loaded.                 -->
  <!--                                                                                         -->
  <!-- @param begin        An inlined element that will be invoked before the var handling     -->
  <!--                     takes place (optional).                                             -->
  <!-- @param handle-var   An inlined element that will be invoked for each key-value pair     -->
  <!--                     stored within the properties 'var.name' and 'var.directory'. The    -->
  <!--                     property 'var.name' contains the of 'var.txt' (trimmed, of course). -->
  <!--                     The property 'var.directory' contains it's directory while only     -->
  <!--                     using forward slashes.                                              -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <macrodef name="process-vars">
    <attribute name="dir"/>
    <element name="begin"      optional="true"  description="Will be called at the begin of the processing."/>
    <element name="handle-var" optional="false" description="Handles the variable."/>
    <sequential>
      <begin/>
      <for param="varfile">
        <fileset dir="@{dir}" includes="**/var.txt"/>
        <sequential>
          <get-directory file="@{varfile}" property="var.directory"/>
          <loadfile srcfile="@{varfile}"   property="var.name"/>
          <handle-var/>
          <var unset="true" name="var.directory"/>
          <var unset="true" name="var.name"/>
        </sequential>
      </for>
    </sequential>
  </macrodef>
  
  <!-- ~~~ PRIVATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Creates an ant script that is used to import all macros.                                -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <macrodef name="create-import-list">
    <sequential>
      <echo file="${dir.ext}/macros/imports.xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&#10;</echo>
      <echo file="${dir.ext}/macros/imports.xml" append="true">&lt;project name="imports" basedir="."&gt;&#10;</echo>
      <echo file="${dir.ext}/macros/imports.xml" append="true">  &lt;dirname  property="dir.workspace" file="../../dummy"/&gt;&#10;</echo>
      <echo file="${dir.ext}/macros/imports.xml" append="true">  &lt;property name="dir.ext"           value="$${dir.workspace}/_ext"/&gt;&#10;</echo>
      <for param="macroset">
        <fileset dir="${dir.ext}/macros" includes="*.xml" excludes="imports.xml"/>
        <sequential>
          <basename file="@{macroset}" property="create-import-list_basename"/>
          <echo file="${dir.ext}/macros/imports.xml" append="true">  &lt;import file=&quot;$${dir.ext}/macros/${create-import-list_basename}&quot;/&gt;&#10;</echo>
          <var unset="true" name="create-import-list_basename"/>
        </sequential>
      </for>
      <echo file="${dir.ext}/macros/imports.xml" append="true">&lt;/project&gt;&#10;</echo>
    </sequential>
  </macrodef>
  
  <!-- ~~~ PRIVATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Loads a build extension from the repository.                                            -->
  <!--                                                                                         -->
  <!-- @param name        The name of the extension file.                                      -->
  <!-- @param extension   The kind of extension that has to be loaded (macros, stylesheets,    -->
  <!--                    etc.)                                                                -->
  <!-- @param dir         The directory where the extension shall be stored to.                -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <macrodef name="retrieve-build-extension">
    <attribute name="name"/>
    <attribute name="extension"/>
    <attribute name="dir"/>
    <sequential>
      <if>
        <not><available file="@{dir}/@{name}"/></not>
        <then>
          <echo>Loading @{extension} '@{name}'</echo>
          <svn svnkit="true" username="${svn.username}" password="${svn.password}">
            <export srcurl="${svn.repositories}/build-extensions/@{extension}/@{name}" destpath="@{dir}/@{name}"/>
          </svn>
        </then>
      </if>
    </sequential>
  </macrodef>

  <!-- ~~~ PRIVATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Loads a license file from the repository.                                               -->
  <!--                                                                                         -->
  <!-- @param license   The name of the license file.                                          -->
  <!-- @param version   The version of the license that has to be loaded.                      -->
  <!-- @param dir       The directory where the extension shall be stored to.                  -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <macrodef name="retrieve-license">
    <attribute name="license"/>
    <attribute name="version"/>
    <attribute name="dir"/>
    <sequential>
      <if>
        <not><available file="@{dir}/@{license}/@{version}.txt"/></not>
        <then>
          <mkdir dir="@{dir}/@{license}"/>
          <echo>Loading license '@{license}' - @{version}</echo>
          <svn svnkit="true" username="${svn.username}" password="${svn.password}">
            <export 
              srcurl="${svn.repositories}/licenses/@{license}/@{version}.txt" 
              destpath="@{dir}/@{license}/@{version}.txt"
            />
          </svn>
        </then>
      </if>
    </sequential>
  </macrodef>

  <!-- ~~~ PRIVATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Appends a value to a list.                                                              -->
  <!--                                                                                         -->
  <!-- @param property    The name of the variable used to contain a list.                     -->
  <!-- @param value       The value which has to be added.                                     -->
  <!-- @param delimiter   The delimiter which has to be used.                                  -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <macrodef name="append">
    <attribute name="property"/>
    <attribute name="value"/>
    <attribute name="delimiter" default="&#10;"/>
    <sequential>
      <if>
        <equals arg1="${@{property}}" arg2=""/>
        <then>
          <var name="@{property}" value="@{value}"/>
        </then>
        <else>
          <var name="@{property}" value="${@{property}}@{delimiter}@{value}"/>
        </else>
      </if>
    </sequential>
  </macrodef>
  
  <!-- ~~~ PRIVATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Checks whether a version is unequal or not. A version is considered unequal if the      -->
  <!-- version file does not exist or does contain another value than the specified one.       -->
  <!--                                                                                         -->
  <!-- @param versionfile   The location of the version file.                                  -->
  <!-- @param version       The version of the library.                                        -->
  <!-- @param property      The property which will receive the result.                        -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <macrodef name="is-version-unequal">
    <attribute name="versionfile"/>
    <attribute name="version"/>
    <attribute name="property"/>
    <sequential>
      <var name="@{property}" value="true"/>
      <if>
        <available file="@{versionfile}" type="file"/>
        <then>
          <loadfile srcfile="@{versionfile}" property="is-version-unequal_current">
            <filterchain>
              <striplinebreaks/>
            </filterchain>
          </loadfile>
          <if>
            <equals arg1="@{version}" arg2="${is-version-unequal_current}"/>
            <then>
              <var name="@{property}" value="false"/>
            </then>
          </if>
          <var unset="true" name="is-version-unequal_current"/>
        </then>
      </if>
    </sequential>
  </macrodef>

  <!-- ~~~ PRIVATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Loads a specific library from the repository.                                           -->
  <!--                                                                                         -->
  <!-- @param dir               The base directory for the libraries.                          -->
  <!-- @param name              The name of the library.                                       -->
  <!-- @param version           The version of the library.                                    -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <macrodef name="retrieve-library">
    <attribute name="dir"/>
    <attribute name="name"/>
    <attribute name="version"/>
    <sequential>
      <echo>Checking '@{name}' version '@{version}'...</echo>
      <var name="retrieve-library_dir"       value="@{dir}/@{name}"/>
      <var name="retrieve-library_retrieve"  value="false"/>
      <mkdir dir="@{dir}"/>
      <!-- check whether we need to run an update. -->
      <is-version-unequal 
        versionfile="${retrieve-library_dir}/version.txt" 
        property="retrieve-library_retrieve" 
        version="@{version}"
      />
      <if>
        <istrue value="${retrieve-library_retrieve}"/>
        <then>
          <!-- remove potentially existing files first. -->
          <if>
            <available file="${retrieve-library_dir}"/>
            <then>
              <delete includeemptydirs="true">
                <fileset dir="@{dir}" includes="@{name}"/>
                <fileset dir="@{dir}" includes="@{name}/**"/>
              </delete>
            </then>
          </if>
          <!-- now load the content -->
          <svn svnkit="true" username="${svn.username}" password="${svn.password}">
            <export srcurl="${svn.repositories}/@{name}/@{version}" destpath="${retrieve-library_dir}"/>
          </svn>
          <!-- do some checks. they're cheap and the user get's understandable information. -->
          <if>
            <not><available file="${retrieve-library_dir}/var.txt" type="file"/></not>
            <then>
              <fail message="repository inconsistent: missing file '${retrieve-library_dir}/var.txt'."/>
            </then>
          </if>
          <if>
            <not><available file="${retrieve-library_dir}/version.txt" type="file"/></not>
            <then>
              <fail message="repository inconsistent: missing file '${retrieve-library_dir}/var.txt'."/>
            </then>
          </if>
        </then>
      </if>
      <var unset="true" name="retrieve-library_retrieve"/>
      <var unset="true" name="retrieve-library_dir"/>
    </sequential>
  </macrodef>

  <!-- ~~~ PRIVATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Gets the normalized directory name from a file. The path uses slashes as separators.    -->
  <!--                                                                                         -->
  <!-- @param file                The file which directory is desired.                         -->
  <!-- @param property            The property used to receive the normalized path.            -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <macrodef name="get-directory">
    <attribute name="file"/>
    <attribute name="property"/>
    <sequential>
      <dirname file="@{file}" property="get-directory_dir"/>
      <propertyregex property="get-directory_dir" input="${get-directory_dir}" regexp="\\" replace="/" override="true" global="true"/>
      <var name="@{property}" value="${get-directory_dir}"/>
      <var unset="true" name="get-directory_dir"/>
    </sequential>
  </macrodef>
  
  <!-- ~~~ PRIVATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Creates a configuration file for eclipse while collecting the necessary information     -->
  <!-- from a directory.                                                                       -->
  <!--                                                                                         -->
  <!-- @param dir            The root directory which will be traversed recursively.           -->
  <!-- @param destination    The destination path where the configuration has to be stored.    -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <macrodef name="create-eclipse-config">
    <attribute name="dir"/>
    <attribute name="destination"/>
    <sequential>
      <process-vars dir="@{dir}">
        <begin>
          <echo file="@{destination}">file_export_version=3.0&#10;</echo>
        </begin>
        <handle-var>
          <propertyregex property="var.directory" input="${var.directory}" regexp=":" replace="\\\\:" override="true" global="true"/>
          <echo append="true" file="@{destination}">${varprefix}.${var.name}=${var.directory}&#10;</echo>
        </handle-var>
      </process-vars>
      <echo file="@{destination}" append="true">/instance/org.eclipse.jdt.ui/org.eclipse.jdt.ui.wizards.srcBinFoldersBinName=${dir.classes}&#10;</echo>
      <echo file="@{destination}" append="true">/instance/org.eclipse.jdt.ui/org.eclipse.jdt.ui.wizards.srcBinFoldersSrcName=${dir.sources}&#10;</echo>
      <echo file="@{destination}" append="true">/instance/org.eclipse.core.resources/encoding=${workspace.encoding}&#10;</echo>
      <!-- add the import order to the configuration if there's such a file. -->
      <if>
        <available file="${dir.ext}/${file.importorder}" type="file"/>
        <then>
          <load-importorder file="${dir.ext}/${file.importorder}" property="create-eclipse-config_importorder"/>
          <echo file="@{destination}" append="true">/instance/org.eclipse.jdt.ui/org.eclipse.jdt.ui.importorder=${create-eclipse-config_importorder}&#10;</echo>
          <var unset="true" name="create-eclipse-config_importorder"/>
        </then>
      </if>
      <!-- add the codestyle configuration if it's there. -->
      <if>
        <available file="${dir.ext}/${file.codestyle}" type="file"/>
        <then>
          <loadfile property="create-eclipse-config_codestyle" srcfile="${dir.ext}/${file.codestyle}" encoding="UTF-8"/>
          <!-- replace line feeds with a \n literal. -->
          <propertyregex property="create-eclipse-config_codestyle"     input="${create-eclipse-config_codestyle}" regexp="&#13;&#10;" replace="\\\\n" override="true" global="true"/>
          <propertyregex property="create-eclipse-config_codestyle"     input="${create-eclipse-config_codestyle}" regexp="&#10;"      replace="\\\\n" override="true" global="true"/>
          <!-- extract the name of the codestyle. -->
          <propertyregex property="create-eclipse-config_codestylename" input="${create-eclipse-config_codestyle}" regexp="name=&quot;([^&quot;]+)&quot;" select="\1"/>
          <!-- setup the configuration parameters. -->
          <echo file="@{destination}" append="true">/instance/org.eclipse.jdt.ui/org.eclipse.jdt.ui.formatterprofiles=${create-eclipse-config_codestyle}&#10;</echo>
          <echo file="@{destination}" append="true">/instance/org.eclipse.jdt.ui/formatter_profile=_${create-eclipse-config_codestylename}&#10;</echo>
          <var unset="true" name="create-eclipse-config_codestyle"/>
          <var unset="true" name="create-eclipse-config_codestylename"/>
        </then>
      </if>
      <!-- add compiler settings if there are some. -->
      <if>
        <available file="${dir.ext}/${file.compiler}" type="file"/>
        <then>
          <loadfile property="create-eclipse-config_compiler" srcfile="${dir.ext}/${file.compiler}">
            <filterchain>
              <striplinecomments/>
            </filterchain>
          </loadfile>
          <for param="singleline" list="${create-eclipse-config_compiler}" delimiter="&#10;" trim="yes">
            <sequential>
              <echo file="@{destination}" append="true">/instance/org.eclipse.jdt.core/org.eclipse.jdt.core.compiler.problem.@{singleline}&#10;</echo>
            </sequential>
          </for>
          <var unset="true" name="create-eclipse-config_compiler"/>
        </then>
      </if>
    </sequential>
  </macrodef>

  <!-- ~~~ PRIVATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Loads the import order from an eclipse exported file. The order is identified by the    -->
  <!-- key which is a numerical value.                                                         -->
  <!--                                                                                         -->
  <!-- @param file       The file containing the importorder description.                      -->
  <!-- @param property   The property where the importorder will be stored to, so this value   -->
  <!--                   can be imported using eclipse preferences.                            -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <macrodef name="load-importorder">
    <attribute name="file"/>
    <attribute name="property"/>
    <sequential>
      <!-- we want to sort lexicographically so we need to make sure that the numerical -->
      <!-- values are filled up with zeros.                                             -->
      <prefix-by-regexp file="@{file}" property="load-importorder_list1" regexp="^([0-9])="           prefix="00"/>
      <prefix-by-regexp file="@{file}" property="load-importorder_list2" regexp="^([0-9][0-9])="      prefix="0"/>
      <prefix-by-regexp file="@{file}" property="load-importorder_list3" regexp="^([0-9][0-9][0-9])=" prefix=""/>
      <set-default property="load-importorder_list1" value=""/>
      <set-default property="load-importorder_list2" value=""/>
      <set-default property="load-importorder_list3" value=""/>
      <!-- now run the actual sorting. -->
      <sortlist 
        property="load-importorder_sorted" 
        value="${load-importorder_list1}&#10;${load-importorder_list2}&#10;${load-importorder_list3}" 
        delimiter="&#10;"
      />
      <!-- create a list from the imports (the sorted one). -->
      <var name="load-importorder_result" value=""/>
      <for param="singleline" list="${load-importorder_sorted}" delimiter="&#10;" trim="yes">
        <sequential>
          <!-- don't forget to only use the value. -->
          <propertyregex property="load-importorder_value" input="@{singleline}" regexp="^(.+)=(.+)" replace="\2"/>
          <append property="load-importorder_result" value="${load-importorder_value}" delimiter=";"/>
          <var unset="true" name="load-importorder_value"/>
        </sequential>
      </for>
      <var name="@{property}" value="${load-importorder_result}"/>
      <var unset="true" name="load-importorder_list1"/>
      <var unset="true" name="load-importorder_list2"/>
      <var unset="true" name="load-importorder_list3"/>
      <var unset="true" name="load-importorder_sorted"/>
      <var unset="true" name="load-importorder_result"/>
    </sequential>
  </macrodef>
  
  <!-- ~~~ PRIVATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Prefixes each line that matches a specific regular expression.                          -->
  <!--                                                                                         -->
  <!-- @param regexp     The regular expression that needs to be matched.                      -->
  <!-- @param file       The file containing the lines to be loaded.                           -->
  <!-- @param prefix     The prefix to be used.                                                -->
  <!-- @param property   The property where the prefixed lines will be stored to.              -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <macrodef name="prefix-by-regexp">
    <attribute name="regexp"/>
    <attribute name="file"/>
    <attribute name="prefix"/>
    <attribute name="property"/>
    <sequential>
      <!-- fetch the lines. -->
      <loadfile property="prefix-by-regexp_content" srcfile="@{file}">
        <filterchain>
          <linecontainsregexp>
            <regexp pattern="@{regexp}"/>
          </linecontainsregexp>
        </filterchain>
      </loadfile>
      <set-default property="prefix-by-regexp_content" value=""/>
      <!-- now prefix each line. -->
      <var name="prefix-by-regexp_result" value=""/>
      <for param="singleline" list="${prefix-by-regexp_content}" delimiter="&#10;">
        <sequential>
          <append property="prefix-by-regexp_result" value="@{prefix}@{singleline}"/>
        </sequential>
      </for>
      <var name="@{property}" value="${prefix-by-regexp_result}"/>
      <var unset="true" name="prefix-by-regexp_content"/>
      <var unset="true" name="prefix-by-regexp_result"/>
    </sequential>
  </macrodef>

  <!-- ~~~ PRIVATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Creates a configuration file for ant while collecting the necessary information from    -->
  <!-- a directory.                                                                            -->
  <!--                                                                                         -->
  <!-- @param dir            The root directory which will be traversed recursively.           -->
  <!-- @param destination    The destination path where the configuration has to be stored.    -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <macrodef name="create-ant-config">
    <attribute name="dir"/>
    <attribute name="destination"/>
    <sequential>
      <process-vars dir="@{dir}">
        <begin>
          <echo file="@{destination}"># Properties&#10;</echo>
        </begin>
        <handle-var>
          <echo append="true" file="@{destination}">${var.name}=${var.directory}&#10;</echo>
        </handle-var>
      </process-vars>
    </sequential>
  </macrodef>
  
  <!-- ~~~ PRIVATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Sets a default value in case a value has not been provided yet.                         -->
  <!--                                                                                         -->
  <!-- @param property   The property which must have a value afterwards.                      -->
  <!-- @param value      The value which will be set when the property currently doesn't       -->
  <!--                   contain anything.                                                     -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <macrodef name="set-default">
    <attribute name="property"/>
    <attribute name="value"/>
    <sequential>
      <if>
        <or>
          <equals arg1="" arg2="${@{property}}"/>
          <equals arg1="$${@{property}}" arg2="${@{property}}"/>
        </or>
        <then>
          <var name="@{property}" value="@{value}"/>
        </then>
      </if>
    </sequential>
  </macrodef>
  
  <target name="generate-configurations">

    <set-default property="file.declaration"    value="externals.properties"/>
    <set-default property="file.importorder"    value="default.importorder"/>
    <set-default property="file.codestyle"      value="default.codestyle"/>
    <set-default property="file.compiler"       value="default.compiler"/>
    <set-default property="dir.sources"         value="sources"/>
    <set-default property="dir.classes"         value="classes"/>
    <set-default property="workspace.encoding"  value="UTF-8"/>
    
    <!-- load libraries needed by the production code. -->
    <process-pairs declaration="${dir.ext}/${file.declaration}" key="libs">
      <property-handler>
        <retrieve-library dir="${dir.ext}/libs" name="${property.name}" version="${property.value}"/>
      </property-handler>
    </process-pairs>

    <!-- load libraries needed for the build and quality processes. -->
    <process-pairs declaration="${dir.ext}/${file.declaration}" key="tools">
      <property-handler>
        <retrieve-library dir="${dir.ext}/tools" name="${property.name}" version="${property.value}"/>
      </property-handler>
    </process-pairs>

    <!-- load ant macros. -->
    <process-pairs declaration="${dir.ext}/${file.declaration}" key="macros">
      <property-handler>
        <retrieve-build-extension name="${property.value}.xml" extension="macros" dir="${dir.ext}/macros"/>
      </property-handler>
    </process-pairs>

    <!-- load stylesheets. -->
    <process-pairs declaration="${dir.ext}/${file.declaration}" key="stylesheets">
      <property-handler>
        <retrieve-build-extension name="${property.value}.xsl" extension="stylesheets" dir="${dir.ext}/stylesheets"/>
      </property-handler>
    </process-pairs>

    <!-- load license files. -->
    <process-pairs declaration="${dir.ext}/${file.declaration}" key="license">
      <property-handler>
        <retrieve-license license="${property.name}" version="${property.value}" dir="${dir.ext}/licenses"/>
      </property-handler>
    </process-pairs>

    <!-- create the ant macro importlist. -->
    <create-import-list/>
      
    <!-- create the ant variables file. -->
    <create-ant-config dir="${dir.ext}" destination="${dir.ext}/eclipse.vars"/>
    
    <!-- create the eclipse configuration file. -->
    <create-eclipse-config dir="${dir.ext}" destination="${dir.ext}/preferences.epf"/>
    
  </target>

</project>

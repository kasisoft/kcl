apply plugin: 'java'

buildscript {
  apply from: 'https://github.com/valkolovos/gradle_cobertura/raw/master/repo/gradle_cobertura/gradle_cobertura/1.0/coberturainit.gradle'
}

sourceCompatibility = 1.6
targetCompatibility = 1.6
compileJava.options.encoding = 'UTF-8'
 
group             = "com.kasisoft"
archivesBaseName  = "com.kasisoft.libs.common"
version           = "1.3-SNAPSHOT"
ext.isSnapshot    = version.endsWith("SNAPSHOT")

tasks.withType(Compile) {
  options.encoding = 'UTF-8'
}

repositories {
  maven {
    url "T:/_maven/repository"
  }
  mavenCentral()
}

dependencies {
    compile      'org.projectlombok:lombok:1.12.4'
    testCompile  'org.hamcrest:hamcrest-all:1.3+'
    testCompile  'org.testng:testng:6.8+'
    testCompile  'net.sourceforge.cobertura:cobertura:2.0.3'
}


test {

  useTestNG()

  // set a system property for the test JVM(s)
  // systemProperty 'some.prop', 'value'

  // options {
  //  listeners << 'org.uncommons.reportng.HTMLReporter'
  //  listeners << 'org.uncommons.reportng.JUnitXMLReporter'
  // }
  
  // explicitly include or exclude tests
  include '**/*'
  // exclude 'org/boo/**'

  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = true

  // set heap size for the test JVM(s)
  minHeapSize = "128m"
  maxHeapSize = "512m"

  // set JVM arguments for the test JVM(s)
  jvmArgs '-XX:MaxPermSize=256m'

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
    logger.lifecycle("Running test: " + descriptor)
  }

  // listen to standard out and standard error of the test JVM(s)
  onOutput { descriptor, event ->
    logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }
  
}

